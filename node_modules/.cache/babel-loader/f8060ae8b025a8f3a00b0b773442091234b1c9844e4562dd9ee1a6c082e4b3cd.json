{"ast":null,"code":"export default {\n  props: {\n    options: Object\n  },\n  mounted() {\n    this.init();\n  },\n  beforeDestroy() {\n    this.$flickity.destroy();\n    this.$flickity = null;\n  },\n  methods: {\n    /**\n     * Initialize a new flickity and emit init event.\n     */\n    init() {\n      const Flickity = require('flickity');\n      this.$flickity = new Flickity(this.$el, this.options);\n      this.$emit('init', this.$flickity);\n    },\n    /**\n     * Return the current flickity instance to access directly\n     *\n     * @return {Flickity}\n     */\n    flickity() {\n      return this.$flickity;\n    },\n    /**\n     * Selecting Slides\n     */\n\n    /**\n     * Select a slide\n     *\n     * @param {number} index\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    select(index, isWrapped, isInstant) {\n      this.$flickity.select(index, isWrapped, isInstant);\n    },\n    /**\n     * Change to the next slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    next(isWrapped, isInstant) {\n      this.$flickity.next(isWrapped, isInstant);\n    },\n    /**\n     * Change to the previous slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    previous(isWrapped, isInstant) {\n      this.$flickity.previous(isWrapped, isInstant);\n    },\n    /**\n     * Select a cell\n     *\n     * @param {number} value\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    selectCell(value, isWrapped, isInstant) {\n      this.$flickity.selectCell(value, isWrapped, isInstant);\n    },\n    /**\n     * Sizing and Positioning\n     */\n\n    /**\n     * Trigger a resize event\n     */\n    resize() {\n      this.$flickity.resize();\n    },\n    /**\n     * Trigger a reposition event\n     */\n    reposition() {\n      this.$flickity.reposition();\n    },\n    /**\n     * Adding and removing cells\n     */\n\n    /**\n     * Prepend elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    prepend(elements) {\n      this.$flickity.prepend(elements);\n    },\n    /**\n     * Append elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    append(elements) {\n      this.$flickity.append(elements);\n    },\n    /**\n     * Insert elements at a given index\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     * @param {number} index\n     */\n    insert(elements, index) {\n      this.$flickity.insert(elements, index);\n    },\n    /**\n     * Remove elements from flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    remove(elements) {\n      this.$flickity.remove(elements);\n    },\n    /**\n     * Player\n     */\n\n    /**\n     * Trigger a playPlayer event\n     */\n    playPlayer() {\n      this.$flickity.playPlayer();\n    },\n    /**\n     * Trigger a stopPlayer event\n     */\n    stopPlayer() {\n      this.$flickity.stopPlayer();\n    },\n    /**\n     * Trigger a pausePlayer event\n     */\n    pausePlayer() {\n      this.$flickity.pausePlayer();\n    },\n    /**\n     * Trigger a unpausePlayer event\n     */\n    unpausePlayer() {\n      this.$flickity.unpausePlayer();\n    },\n    /**\n     * Trigger a rerender event\n     */\n    rerender() {\n      this.$flickity.destroy();\n      this.init();\n    },\n    /**\n     * Utilities\n     */\n\n    /**\n     * Destroy the flickity instance\n     */\n    destroy() {\n      this.$flickity.destroy();\n    },\n    /**\n     * Trigger a rerender event\n     */\n    reloadCells() {\n      this.$flickity.reloadCells();\n    },\n    /**\n     * Get the cell elements\n     *\n     * @return {array}\n     */\n    getCellElements() {\n      return this.$flickity.getCellElements();\n    },\n    /**\n     * Return flickity data\n     *\n     * @return {Flickity}\n     */\n    data() {\n      const Flickity = require('flickity');\n      return Flickity.data(this.$el);\n    },\n    /**\n     * Events\n     */\n\n    /**\n     * Attach an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    on(eventName, listener) {\n      this.$flickity.on(eventName, listener);\n    },\n    /**\n     * Remove an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    off(eventName, listener) {\n      this.$flickity.off(eventName, listener);\n    },\n    /**\n     * Attach an event once\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    once(eventName, listener) {\n      this.$flickity.once(eventName, listener);\n    },\n    /**\n     * Properties\n     */\n\n    /**\n     * Return the selected element\n     *\n     * @return {HTMLElement}\n     */\n    selectedElement() {\n      return this.$flickity.selectedElement;\n    },\n    /**\n     * Return the selected elements\n     *\n     * @return {array}\n     */\n    selectedElements() {\n      return this.$flickity.selectedElements;\n    },\n    /**\n     * Return the selected index\n     *\n     * @return {number}\n     */\n    selectedIndex() {\n      return this.$flickity.selectedIndex;\n    },\n    /**\n     * Return the cells\n     *\n     * @return {array}\n     */\n    cells() {\n      return this.$flickity.cells;\n    },\n    /**\n     * Return the slides\n     *\n     * @return {array}\n     */\n    slides() {\n      return this.$flickity.slides;\n    },\n    /**\n     * Disable dragging of slider\n     */\n    disableDrag() {\n      this.$flickity.options.draggable = false;\n      this.$flickity.updateDraggable();\n    },\n    /**\n     * Enable dragging of slider\n     */\n    enableDrag() {\n      this.$flickity.options.draggable = true;\n      this.$flickity.updateDraggable();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["props","options","Object","mounted","init","beforeDestroy","$flickity","destroy","methods","Flickity","require","$el","$emit","flickity","select","index","isWrapped","isInstant","next","previous","selectCell","value","resize","reposition","prepend","elements","append","insert","remove","playPlayer","stopPlayer","pausePlayer","unpausePlayer","rerender","reloadCells","getCellElements","data","on","eventName","listener","off","once","selectedElement","selectedElements","selectedIndex","cells","slides","disableDrag","draggable","updateDraggable","enableDrag"],"sourceRoot":"","sources":["D:\\Personal\\Github\\compro.rimba.vue\\node_modules\\vue-flickity\\src\\flickity.vue"],"sourcesContent":["<template>\n  <div>\n    <slot />\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    options: Object,\n  },\n\n  mounted() {\n    this.init();\n  },\n\n  beforeDestroy() {\n    this.$flickity.destroy();\n    this.$flickity = null;\n  },\n\n  methods: {\n    /**\n     * Initialize a new flickity and emit init event.\n     */\n    init() {\n      const Flickity = require('flickity');\n\n      this.$flickity = new Flickity(this.$el, this.options);\n      this.$emit('init', this.$flickity);\n    },\n\n    /**\n     * Return the current flickity instance to access directly\n     *\n     * @return {Flickity}\n     */\n    flickity() {\n      return this.$flickity;\n    },\n\n    /**\n     * Selecting Slides\n     */\n\n    /**\n     * Select a slide\n     *\n     * @param {number} index\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    select(index, isWrapped, isInstant) {\n      this.$flickity.select(index, isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the next slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    next(isWrapped, isInstant) {\n      this.$flickity.next(isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the previous slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    previous(isWrapped, isInstant) {\n      this.$flickity.previous(isWrapped, isInstant);\n    },\n\n    /**\n     * Select a cell\n     *\n     * @param {number} value\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    selectCell(value, isWrapped, isInstant) {\n      this.$flickity.selectCell(value, isWrapped, isInstant);\n    },\n\n    /**\n     * Sizing and Positioning\n     */\n\n    /**\n     * Trigger a resize event\n     */\n    resize() {\n      this.$flickity.resize();\n    },\n\n    /**\n     * Trigger a reposition event\n     */\n    reposition() {\n      this.$flickity.reposition();\n    },\n\n    /**\n     * Adding and removing cells\n     */\n\n    /**\n     * Prepend elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    prepend(elements) {\n      this.$flickity.prepend(elements);\n    },\n\n    /**\n     * Append elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    append(elements) {\n      this.$flickity.append(elements);\n    },\n\n    /**\n     * Insert elements at a given index\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     * @param {number} index\n     */\n    insert(elements, index) {\n      this.$flickity.insert(elements, index);\n    },\n\n    /**\n     * Remove elements from flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    remove(elements) {\n      this.$flickity.remove(elements);\n    },\n\n    /**\n     * Player\n     */\n\n    /**\n     * Trigger a playPlayer event\n     */\n    playPlayer() {\n      this.$flickity.playPlayer();\n    },\n\n    /**\n     * Trigger a stopPlayer event\n     */\n    stopPlayer() {\n      this.$flickity.stopPlayer();\n    },\n\n    /**\n     * Trigger a pausePlayer event\n     */\n    pausePlayer() {\n      this.$flickity.pausePlayer();\n    },\n\n    /**\n     * Trigger a unpausePlayer event\n     */\n    unpausePlayer() {\n      this.$flickity.unpausePlayer();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    rerender() {\n      this.$flickity.destroy();\n      this.init();\n    },\n\n    /**\n     * Utilities\n     */\n\n    /**\n     * Destroy the flickity instance\n     */\n    destroy() {\n      this.$flickity.destroy();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    reloadCells() {\n      this.$flickity.reloadCells();\n    },\n\n    /**\n     * Get the cell elements\n     *\n     * @return {array}\n     */\n    getCellElements() {\n      return this.$flickity.getCellElements();\n    },\n\n    /**\n     * Return flickity data\n     *\n     * @return {Flickity}\n     */\n    data() {\n      const Flickity = require('flickity');\n\n      return Flickity.data(this.$el);\n    },\n\n    /**\n     * Events\n     */\n\n    /**\n     * Attach an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    on(eventName, listener) {\n      this.$flickity.on(eventName, listener);\n    },\n\n    /**\n     * Remove an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    off(eventName, listener) {\n      this.$flickity.off(eventName, listener);\n    },\n\n    /**\n     * Attach an event once\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    once(eventName, listener) {\n      this.$flickity.once(eventName, listener);\n    },\n\n    /**\n     * Properties\n     */\n\n    /**\n     * Return the selected element\n     *\n     * @return {HTMLElement}\n     */\n    selectedElement() {\n      return this.$flickity.selectedElement;\n    },\n\n    /**\n     * Return the selected elements\n     *\n     * @return {array}\n     */\n    selectedElements() {\n      return this.$flickity.selectedElements;\n    },\n\n    /**\n     * Return the selected index\n     *\n     * @return {number}\n     */\n    selectedIndex() {\n      return this.$flickity.selectedIndex;\n    },\n\n    /**\n     * Return the cells\n     *\n     * @return {array}\n     */\n    cells() {\n      return this.$flickity.cells;\n    },\n\n    /**\n     * Return the slides\n     *\n     * @return {array}\n     */\n    slides() {\n      return this.$flickity.slides;\n    },\n\n    /**\n     * Disable dragging of slider\n     */\n    disableDrag() {\n      this.$flickity.options.draggable = false;\n      this.$flickity.updateDraggable();\n    },\n\n    /**\n     * Enable dragging of slider\n     */\n    enableDrag() {\n      this.$flickity.options.draggable = true;\n      this.$flickity.updateDraggable();\n    },\n  },\n};\n</script>\n\n<style src='flickity/dist/flickity.css'></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}