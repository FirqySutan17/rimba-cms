{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n * International Telephone Input v17.0.19\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function (factory) {\n  if (typeof module === \"object\" && module.exports) module.exports = factory();else window.intlTelInput = factory();\n})(function (undefined) {\n  \"use strict\";\n\n  return function () {\n    // Array of country objects for the flag dropdown.\n    // Here is the criteria for the plugin to support a given country/territory\n    // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n    // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n    // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n    // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n    // Each country array has the following information:\n    // [\n    //    Country name,\n    //    iso2 code,\n    //    International dial code,\n    //    Order (if >1 country with same dial code),\n    //    Area codes\n    // ]\n    var allCountries = [[\"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\"], [\"Albania (Shqipëri)\", \"al\", \"355\"], [\"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\"], [\"American Samoa\", \"as\", \"1\", 5, [\"684\"]], [\"Andorra\", \"ad\", \"376\"], [\"Angola\", \"ao\", \"244\"], [\"Anguilla\", \"ai\", \"1\", 6, [\"264\"]], [\"Antigua and Barbuda\", \"ag\", \"1\", 7, [\"268\"]], [\"Argentina\", \"ar\", \"54\"], [\"Armenia (Հայաստան)\", \"am\", \"374\"], [\"Aruba\", \"aw\", \"297\"], [\"Ascension Island\", \"ac\", \"247\"], [\"Australia\", \"au\", \"61\", 0], [\"Austria (Österreich)\", \"at\", \"43\"], [\"Azerbaijan (Azərbaycan)\", \"az\", \"994\"], [\"Bahamas\", \"bs\", \"1\", 8, [\"242\"]], [\"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\"], [\"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\"], [\"Barbados\", \"bb\", \"1\", 9, [\"246\"]], [\"Belarus (Беларусь)\", \"by\", \"375\"], [\"Belgium (België)\", \"be\", \"32\"], [\"Belize\", \"bz\", \"501\"], [\"Benin (Bénin)\", \"bj\", \"229\"], [\"Bermuda\", \"bm\", \"1\", 10, [\"441\"]], [\"Bhutan (འབྲུག)\", \"bt\", \"975\"], [\"Bolivia\", \"bo\", \"591\"], [\"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\"], [\"Botswana\", \"bw\", \"267\"], [\"Brazil (Brasil)\", \"br\", \"55\"], [\"British Indian Ocean Territory\", \"io\", \"246\"], [\"British Virgin Islands\", \"vg\", \"1\", 11, [\"284\"]], [\"Brunei\", \"bn\", \"673\"], [\"Bulgaria (България)\", \"bg\", \"359\"], [\"Burkina Faso\", \"bf\", \"226\"], [\"Burundi (Uburundi)\", \"bi\", \"257\"], [\"Cambodia (កម្ពុជា)\", \"kh\", \"855\"], [\"Cameroon (Cameroun)\", \"cm\", \"237\"], [\"Canada\", \"ca\", \"1\", 1, [\"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\"]], [\"Cape Verde (Kabu Verdi)\", \"cv\", \"238\"], [\"Caribbean Netherlands\", \"bq\", \"599\", 1, [\"3\", \"4\", \"7\"]], [\"Cayman Islands\", \"ky\", \"1\", 12, [\"345\"]], [\"Central African Republic (République centrafricaine)\", \"cf\", \"236\"], [\"Chad (Tchad)\", \"td\", \"235\"], [\"Chile\", \"cl\", \"56\"], [\"China (中国)\", \"cn\", \"86\"], [\"Christmas Island\", \"cx\", \"61\", 2, [\"89164\"]], [\"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [\"89162\"]], [\"Colombia\", \"co\", \"57\"], [\"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\"], [\"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\"], [\"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\"], [\"Cook Islands\", \"ck\", \"682\"], [\"Costa Rica\", \"cr\", \"506\"], [\"Côte d’Ivoire\", \"ci\", \"225\"], [\"Croatia (Hrvatska)\", \"hr\", \"385\"], [\"Cuba\", \"cu\", \"53\"], [\"Curaçao\", \"cw\", \"599\", 0], [\"Cyprus (Κύπρος)\", \"cy\", \"357\"], [\"Czech Republic (Česká republika)\", \"cz\", \"420\"], [\"Denmark (Danmark)\", \"dk\", \"45\"], [\"Djibouti\", \"dj\", \"253\"], [\"Dominica\", \"dm\", \"1\", 13, [\"767\"]], [\"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [\"809\", \"829\", \"849\"]], [\"Ecuador\", \"ec\", \"593\"], [\"Egypt (‫مصر‬‎)\", \"eg\", \"20\"], [\"El Salvador\", \"sv\", \"503\"], [\"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\"], [\"Eritrea\", \"er\", \"291\"], [\"Estonia (Eesti)\", \"ee\", \"372\"], [\"Eswatini\", \"sz\", \"268\"], [\"Ethiopia\", \"et\", \"251\"], [\"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\"], [\"Faroe Islands (Føroyar)\", \"fo\", \"298\"], [\"Fiji\", \"fj\", \"679\"], [\"Finland (Suomi)\", \"fi\", \"358\", 0], [\"France\", \"fr\", \"33\"], [\"French Guiana (Guyane française)\", \"gf\", \"594\"], [\"French Polynesia (Polynésie française)\", \"pf\", \"689\"], [\"Gabon\", \"ga\", \"241\"], [\"Gambia\", \"gm\", \"220\"], [\"Georgia (საქართველო)\", \"ge\", \"995\"], [\"Germany (Deutschland)\", \"de\", \"49\"], [\"Ghana (Gaana)\", \"gh\", \"233\"], [\"Gibraltar\", \"gi\", \"350\"], [\"Greece (Ελλάδα)\", \"gr\", \"30\"], [\"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\"], [\"Grenada\", \"gd\", \"1\", 14, [\"473\"]], [\"Guadeloupe\", \"gp\", \"590\", 0], [\"Guam\", \"gu\", \"1\", 15, [\"671\"]], [\"Guatemala\", \"gt\", \"502\"], [\"Guernsey\", \"gg\", \"44\", 1, [\"1481\", \"7781\", \"7839\", \"7911\"]], [\"Guinea (Guinée)\", \"gn\", \"224\"], [\"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\"], [\"Guyana\", \"gy\", \"592\"], [\"Haiti\", \"ht\", \"509\"], [\"Honduras\", \"hn\", \"504\"], [\"Hong Kong (香港)\", \"hk\", \"852\"], [\"Hungary (Magyarország)\", \"hu\", \"36\"], [\"Iceland (Ísland)\", \"is\", \"354\"], [\"India (भारत)\", \"in\", \"91\"], [\"Indonesia\", \"id\", \"62\"], [\"Iran (‫ایران‬‎)\", \"ir\", \"98\"], [\"Iraq (‫العراق‬‎)\", \"iq\", \"964\"], [\"Ireland\", \"ie\", \"353\"], [\"Isle of Man\", \"im\", \"44\", 2, [\"1624\", \"74576\", \"7524\", \"7924\", \"7624\"]], [\"Israel (‫ישראל‬‎)\", \"il\", \"972\"], [\"Italy (Italia)\", \"it\", \"39\", 0], [\"Jamaica\", \"jm\", \"1\", 4, [\"876\", \"658\"]], [\"Japan (日本)\", \"jp\", \"81\"], [\"Jersey\", \"je\", \"44\", 3, [\"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\"]], [\"Jordan (‫الأردن‬‎)\", \"jo\", \"962\"], [\"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [\"33\", \"7\"]], [\"Kenya\", \"ke\", \"254\"], [\"Kiribati\", \"ki\", \"686\"], [\"Kosovo\", \"xk\", \"383\"], [\"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\"], [\"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\"], [\"Laos (ລາວ)\", \"la\", \"856\"], [\"Latvia (Latvija)\", \"lv\", \"371\"], [\"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\"], [\"Lesotho\", \"ls\", \"266\"], [\"Liberia\", \"lr\", \"231\"], [\"Libya (‫ليبيا‬‎)\", \"ly\", \"218\"], [\"Liechtenstein\", \"li\", \"423\"], [\"Lithuania (Lietuva)\", \"lt\", \"370\"], [\"Luxembourg\", \"lu\", \"352\"], [\"Macau (澳門)\", \"mo\", \"853\"], [\"North Macedonia (Македонија)\", \"mk\", \"389\"], [\"Madagascar (Madagasikara)\", \"mg\", \"261\"], [\"Malawi\", \"mw\", \"265\"], [\"Malaysia\", \"my\", \"60\"], [\"Maldives\", \"mv\", \"960\"], [\"Mali\", \"ml\", \"223\"], [\"Malta\", \"mt\", \"356\"], [\"Marshall Islands\", \"mh\", \"692\"], [\"Martinique\", \"mq\", \"596\"], [\"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\"], [\"Mauritius (Moris)\", \"mu\", \"230\"], [\"Mayotte\", \"yt\", \"262\", 1, [\"269\", \"639\"]], [\"Mexico (México)\", \"mx\", \"52\"], [\"Micronesia\", \"fm\", \"691\"], [\"Moldova (Republica Moldova)\", \"md\", \"373\"], [\"Monaco\", \"mc\", \"377\"], [\"Mongolia (Монгол)\", \"mn\", \"976\"], [\"Montenegro (Crna Gora)\", \"me\", \"382\"], [\"Montserrat\", \"ms\", \"1\", 16, [\"664\"]], [\"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0], [\"Mozambique (Moçambique)\", \"mz\", \"258\"], [\"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\"], [\"Namibia (Namibië)\", \"na\", \"264\"], [\"Nauru\", \"nr\", \"674\"], [\"Nepal (नेपाल)\", \"np\", \"977\"], [\"Netherlands (Nederland)\", \"nl\", \"31\"], [\"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\"], [\"New Zealand\", \"nz\", \"64\"], [\"Nicaragua\", \"ni\", \"505\"], [\"Niger (Nijar)\", \"ne\", \"227\"], [\"Nigeria\", \"ng\", \"234\"], [\"Niue\", \"nu\", \"683\"], [\"Norfolk Island\", \"nf\", \"672\"], [\"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\"], [\"Northern Mariana Islands\", \"mp\", \"1\", 17, [\"670\"]], [\"Norway (Norge)\", \"no\", \"47\", 0], [\"Oman (‫عُمان‬‎)\", \"om\", \"968\"], [\"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\"], [\"Palau\", \"pw\", \"680\"], [\"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\"], [\"Panama (Panamá)\", \"pa\", \"507\"], [\"Papua New Guinea\", \"pg\", \"675\"], [\"Paraguay\", \"py\", \"595\"], [\"Peru (Perú)\", \"pe\", \"51\"], [\"Philippines\", \"ph\", \"63\"], [\"Poland (Polska)\", \"pl\", \"48\"], [\"Portugal\", \"pt\", \"351\"], [\"Puerto Rico\", \"pr\", \"1\", 3, [\"787\", \"939\"]], [\"Qatar (‫قطر‬‎)\", \"qa\", \"974\"], [\"Réunion (La Réunion)\", \"re\", \"262\", 0], [\"Romania (România)\", \"ro\", \"40\"], [\"Russia (Россия)\", \"ru\", \"7\", 0], [\"Rwanda\", \"rw\", \"250\"], [\"Saint Barthélemy\", \"bl\", \"590\", 1], [\"Saint Helena\", \"sh\", \"290\"], [\"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [\"869\"]], [\"Saint Lucia\", \"lc\", \"1\", 19, [\"758\"]], [\"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2], [\"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\"], [\"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [\"784\"]], [\"Samoa\", \"ws\", \"685\"], [\"San Marino\", \"sm\", \"378\"], [\"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\"], [\"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\"], [\"Senegal (Sénégal)\", \"sn\", \"221\"], [\"Serbia (Србија)\", \"rs\", \"381\"], [\"Seychelles\", \"sc\", \"248\"], [\"Sierra Leone\", \"sl\", \"232\"], [\"Singapore\", \"sg\", \"65\"], [\"Sint Maarten\", \"sx\", \"1\", 21, [\"721\"]], [\"Slovakia (Slovensko)\", \"sk\", \"421\"], [\"Slovenia (Slovenija)\", \"si\", \"386\"], [\"Solomon Islands\", \"sb\", \"677\"], [\"Somalia (Soomaaliya)\", \"so\", \"252\"], [\"South Africa\", \"za\", \"27\"], [\"South Korea (대한민국)\", \"kr\", \"82\"], [\"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\"], [\"Spain (España)\", \"es\", \"34\"], [\"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\"], [\"Sudan (‫السودان‬‎)\", \"sd\", \"249\"], [\"Suriname\", \"sr\", \"597\"], [\"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [\"79\"]], [\"Sweden (Sverige)\", \"se\", \"46\"], [\"Switzerland (Schweiz)\", \"ch\", \"41\"], [\"Syria (‫سوريا‬‎)\", \"sy\", \"963\"], [\"Taiwan (台灣)\", \"tw\", \"886\"], [\"Tajikistan\", \"tj\", \"992\"], [\"Tanzania\", \"tz\", \"255\"], [\"Thailand (ไทย)\", \"th\", \"66\"], [\"Timor-Leste\", \"tl\", \"670\"], [\"Togo\", \"tg\", \"228\"], [\"Tokelau\", \"tk\", \"690\"], [\"Tonga\", \"to\", \"676\"], [\"Trinidad and Tobago\", \"tt\", \"1\", 22, [\"868\"]], [\"Tunisia (‫تونس‬‎)\", \"tn\", \"216\"], [\"Turkey (Türkiye)\", \"tr\", \"90\"], [\"Turkmenistan\", \"tm\", \"993\"], [\"Turks and Caicos Islands\", \"tc\", \"1\", 23, [\"649\"]], [\"Tuvalu\", \"tv\", \"688\"], [\"U.S. Virgin Islands\", \"vi\", \"1\", 24, [\"340\"]], [\"Uganda\", \"ug\", \"256\"], [\"Ukraine (Україна)\", \"ua\", \"380\"], [\"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\"], [\"United Kingdom\", \"gb\", \"44\", 0], [\"United States\", \"us\", \"1\", 0], [\"Uruguay\", \"uy\", \"598\"], [\"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\"], [\"Vanuatu\", \"vu\", \"678\"], [\"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [\"06698\"]], [\"Venezuela\", \"ve\", \"58\"], [\"Vietnam (Việt Nam)\", \"vn\", \"84\"], [\"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\"], [\"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [\"5288\", \"5289\"]], [\"Yemen (‫اليمن‬‎)\", \"ye\", \"967\"], [\"Zambia\", \"zm\", \"260\"], [\"Zimbabwe\", \"zw\", \"263\"], [\"Åland Islands\", \"ax\", \"358\", 1, [\"18\"]]];\n    // loop over all of the countries above, restructuring the data to be objects with named keys\n    for (var i = 0; i < allCountries.length; i++) {\n      var c = allCountries[i];\n      allCountries[i] = {\n        name: c[0],\n        iso2: c[1],\n        dialCode: c[2],\n        priority: c[3] || 0,\n        areaCodes: c[4] || null\n      };\n    }\n    \"use strict\";\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) _defineProperties(Constructor, staticProps);\n      return Constructor;\n    }\n    var intlTelInputGlobals = {\n      getInstance: function getInstance(input) {\n        var id = input.getAttribute(\"data-intl-tel-input-id\");\n        return window.intlTelInputGlobals.instances[id];\n      },\n      instances: {},\n      // using a global like this allows us to mock it in the tests\n      documentReady: function documentReady() {\n        return document.readyState === \"complete\";\n      }\n    };\n    if (typeof window === \"object\") window.intlTelInputGlobals = intlTelInputGlobals;\n    // these vars persist through all instances of the plugin\n    var id = 0;\n    var defaults = {\n      // whether or not to allow the dropdown\n      allowDropdown: true,\n      // if there is just a dial code in the input: remove it on blur\n      autoHideDialCode: true,\n      // add a placeholder in the input with an example number for the selected country\n      autoPlaceholder: \"polite\",\n      // modify the parentClass\n      customContainer: \"\",\n      // modify the auto placeholder\n      customPlaceholder: null,\n      // append menu to specified element\n      dropdownContainer: null,\n      // don't display these countries\n      excludeCountries: [],\n      // format the input value during initialisation and on setNumber\n      formatOnDisplay: true,\n      // geoIp lookup function\n      geoIpLookup: null,\n      // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n      hiddenInput: \"\",\n      // initial country\n      initialCountry: \"\",\n      // localized country names e.g. { 'de': 'Deutschland' }\n      localizedCountries: null,\n      // don't insert international dial codes\n      nationalMode: true,\n      // display only these countries\n      onlyCountries: [],\n      // number type to use for placeholders\n      placeholderNumberType: \"MOBILE\",\n      // the countries at the top of the list. defaults to united states and united kingdom\n      preferredCountries: [\"us\", \"gb\"],\n      // display the country dial code next to the selected flag so it's not part of the typed number\n      separateDialCode: false,\n      // specify the path to the libphonenumber script to enable validation/formatting\n      utilsScript: \"\"\n    };\n    // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n    var regionlessNanpNumbers = [\"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\"];\n    // utility function to iterate over an object. can't use Object.entries or native forEach because\n    // of IE11\n    var forEachProp = function forEachProp(obj, callback) {\n      var keys = Object.keys(obj);\n      for (var i = 0; i < keys.length; i++) {\n        callback(keys[i], obj[keys[i]]);\n      }\n    };\n    // run a method on each instance of the plugin\n    var forEachInstance = function forEachInstance(method) {\n      forEachProp(window.intlTelInputGlobals.instances, function (key) {\n        window.intlTelInputGlobals.instances[key][method]();\n      });\n    };\n    // this is our plugin class that we will create an instance of\n    // eslint-disable-next-line no-unused-vars\n    var Iti = /*#__PURE__*/\n    function () {\n      function Iti(input, options) {\n        var _this = this;\n        _classCallCheck(this, Iti);\n        this.id = id++;\n        this.telInput = input;\n        this.activeItem = null;\n        this.highlightedItem = null;\n        // process specified options / defaults\n        // alternative to Object.assign, which isn't supported by IE11\n        var customOptions = options || {};\n        this.options = {};\n        forEachProp(defaults, function (key, value) {\n          _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n        });\n        this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n      }\n      _createClass(Iti, [{\n        key: \"_init\",\n        value: function _init() {\n          var _this2 = this;\n          // if in nationalMode, disable options relating to dial codes\n          if (this.options.nationalMode) this.options.autoHideDialCode = false;\n          // if separateDialCode then doesn't make sense to A) insert dial code into input\n          // (autoHideDialCode), and B) display national numbers (because we're displaying the country\n          // dial code next to them)\n          if (this.options.separateDialCode) {\n            this.options.autoHideDialCode = this.options.nationalMode = false;\n          }\n          // we cannot just test screen size as some smartphones/website meta tags will report desktop\n          // resolutions\n          // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n          // rest of these declarations\n          // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n          this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n          if (this.isMobile) {\n            // trigger the mobile dropdown css\n            document.body.classList.add(\"iti-mobile\");\n            // on mobile, we want a full screen dropdown, so we must append it to the body\n            if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;\n          }\n          // these promises get resolved when their individual requests complete\n          // this way the dev can do something like iti.promise.then(...) to know when all requests are\n          // complete\n          if (typeof Promise !== \"undefined\") {\n            var autoCountryPromise = new Promise(function (resolve, reject) {\n              _this2.resolveAutoCountryPromise = resolve;\n              _this2.rejectAutoCountryPromise = reject;\n            });\n            var utilsScriptPromise = new Promise(function (resolve, reject) {\n              _this2.resolveUtilsScriptPromise = resolve;\n              _this2.rejectUtilsScriptPromise = reject;\n            });\n            this.promise = Promise.all([autoCountryPromise, utilsScriptPromise]);\n          } else {\n            // prevent errors when Promise doesn't exist\n            this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function () {};\n            this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function () {};\n          }\n          // in various situations there could be no country selected initially, but we need to be able\n          // to assume this variable exists\n          this.selectedCountryData = {};\n          // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n          this._processCountryData();\n          // generate the markup\n          this._generateMarkup();\n          // set the initial state of the input value and the selected flag\n          this._setInitialState();\n          // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\n          this._initListeners();\n          // utils script, and auto country\n          this._initRequests();\n        }\n      }, {\n        key: \"_processCountryData\",\n        value: function _processCountryData() {\n          // process onlyCountries or excludeCountries array if present\n          this._processAllCountries();\n          // process the countryCodes map\n          this._processCountryCodes();\n          // process the preferredCountries\n          this._processPreferredCountries();\n          // translate countries according to localizedCountries option\n          if (this.options.localizedCountries) this._translateCountriesByLocale();\n          // sort countries by name\n          if (this.options.onlyCountries.length || this.options.localizedCountries) {\n            this.countries.sort(this._countryNameSort);\n          }\n        }\n      }, {\n        key: \"_addCountryCode\",\n        value: function _addCountryCode(iso2, countryCode, priority) {\n          if (countryCode.length > this.countryCodeMaxLen) {\n            this.countryCodeMaxLen = countryCode.length;\n          }\n          if (!this.countryCodes.hasOwnProperty(countryCode)) {\n            this.countryCodes[countryCode] = [];\n          }\n          // bail if we already have this country for this countryCode\n          for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n            if (this.countryCodes[countryCode][i] === iso2) return;\n          }\n          // check for undefined as 0 is falsy\n          var index = priority !== undefined ? priority : this.countryCodes[countryCode].length;\n          this.countryCodes[countryCode][index] = iso2;\n        }\n      }, {\n        key: \"_processAllCountries\",\n        value: function _processAllCountries() {\n          if (this.options.onlyCountries.length) {\n            var lowerCaseOnlyCountries = this.options.onlyCountries.map(function (country) {\n              return country.toLowerCase();\n            });\n            this.countries = allCountries.filter(function (country) {\n              return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n            });\n          } else if (this.options.excludeCountries.length) {\n            var lowerCaseExcludeCountries = this.options.excludeCountries.map(function (country) {\n              return country.toLowerCase();\n            });\n            this.countries = allCountries.filter(function (country) {\n              return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n            });\n          } else {\n            this.countries = allCountries;\n          }\n        }\n      }, {\n        key: \"_translateCountriesByLocale\",\n        value: function _translateCountriesByLocale() {\n          for (var i = 0; i < this.countries.length; i++) {\n            var iso = this.countries[i].iso2.toLowerCase();\n            if (this.options.localizedCountries.hasOwnProperty(iso)) {\n              this.countries[i].name = this.options.localizedCountries[iso];\n            }\n          }\n        }\n      }, {\n        key: \"_countryNameSort\",\n        value: function _countryNameSort(a, b) {\n          return a.name.localeCompare(b.name);\n        }\n      }, {\n        key: \"_processCountryCodes\",\n        value: function _processCountryCodes() {\n          this.countryCodeMaxLen = 0;\n          // here we store just dial codes\n          this.dialCodes = {};\n          // here we store \"country codes\" (both dial codes and their area codes)\n          this.countryCodes = {};\n          // first: add dial codes\n          for (var i = 0; i < this.countries.length; i++) {\n            var c = this.countries[i];\n            if (!this.dialCodes[c.dialCode]) this.dialCodes[c.dialCode] = true;\n            this._addCountryCode(c.iso2, c.dialCode, c.priority);\n          }\n          // next: add area codes\n          // this is a second loop over countries, to make sure we have all of the \"root\" countries\n          // already in the map, so that we can access them, as each time we add an area code substring\n          // to the map, we also need to include the \"root\" country's code, as that also matches\n          for (var _i = 0; _i < this.countries.length; _i++) {\n            var _c = this.countries[_i];\n            // area codes\n            if (_c.areaCodes) {\n              var rootCountryCode = this.countryCodes[_c.dialCode][0];\n              // for each area code\n              for (var j = 0; j < _c.areaCodes.length; j++) {\n                var areaCode = _c.areaCodes[j];\n                // for each digit in the area code to add all partial matches as well\n                for (var k = 1; k < areaCode.length; k++) {\n                  var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                  // start with the root country, as that also matches this dial code\n                  this._addCountryCode(rootCountryCode, partialDialCode);\n                  this._addCountryCode(_c.iso2, partialDialCode);\n                }\n                // add the full area code\n                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n              }\n            }\n          }\n        }\n      }, {\n        key: \"_processPreferredCountries\",\n        value: function _processPreferredCountries() {\n          this.preferredCountries = [];\n          for (var i = 0; i < this.options.preferredCountries.length; i++) {\n            var countryCode = this.options.preferredCountries[i].toLowerCase();\n            var countryData = this._getCountryData(countryCode, false, true);\n            if (countryData) this.preferredCountries.push(countryData);\n          }\n        }\n      }, {\n        key: \"_createEl\",\n        value: function _createEl(name, attrs, container) {\n          var el = document.createElement(name);\n          if (attrs) forEachProp(attrs, function (key, value) {\n            return el.setAttribute(key, value);\n          });\n          if (container) container.appendChild(el);\n          return el;\n        }\n      }, {\n        key: \"_generateMarkup\",\n        value: function _generateMarkup() {\n          // if autocomplete does not exist on the element and its form, then\n          // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n          // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n          // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)\n          if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n            this.telInput.setAttribute(\"autocomplete\", \"off\");\n          }\n          // containers (mostly for positioning)\n          var parentClass = \"iti\";\n          if (this.options.allowDropdown) parentClass += \" iti--allow-dropdown\";\n          if (this.options.separateDialCode) parentClass += \" iti--separate-dial-code\";\n          if (this.options.customContainer) {\n            parentClass += \" \";\n            parentClass += this.options.customContainer;\n          }\n          var wrapper = this._createEl(\"div\", {\n            \"class\": parentClass\n          });\n          this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n          this.flagsContainer = this._createEl(\"div\", {\n            \"class\": \"iti__flag-container\"\n          }, wrapper);\n          wrapper.appendChild(this.telInput);\n          // selected flag (displayed to left of input)\n          this.selectedFlag = this._createEl(\"div\", {\n            \"class\": \"iti__selected-flag\",\n            role: \"combobox\",\n            \"aria-controls\": \"iti-\".concat(this.id, \"__country-listbox\"),\n            \"aria-owns\": \"iti-\".concat(this.id, \"__country-listbox\"),\n            \"aria-expanded\": \"false\"\n          }, this.flagsContainer);\n          this.selectedFlagInner = this._createEl(\"div\", {\n            \"class\": \"iti__flag\"\n          }, this.selectedFlag);\n          if (this.options.separateDialCode) {\n            this.selectedDialCode = this._createEl(\"div\", {\n              \"class\": \"iti__selected-dial-code\"\n            }, this.selectedFlag);\n          }\n          if (this.options.allowDropdown) {\n            // make element focusable and tab navigable\n            this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n            this.dropdownArrow = this._createEl(\"div\", {\n              \"class\": \"iti__arrow\"\n            }, this.selectedFlag);\n            // country dropdown: preferred countries, then divider, then all countries\n            this.countryList = this._createEl(\"ul\", {\n              \"class\": \"iti__country-list iti__hide\",\n              id: \"iti-\".concat(this.id, \"__country-listbox\"),\n              role: \"listbox\",\n              \"aria-label\": \"List of countries\"\n            });\n            if (this.preferredCountries.length) {\n              this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n              this._createEl(\"li\", {\n                \"class\": \"iti__divider\",\n                role: \"separator\",\n                \"aria-disabled\": \"true\"\n              }, this.countryList);\n            }\n            this._appendListItems(this.countries, \"iti__standard\");\n            // create dropdownContainer markup\n            if (this.options.dropdownContainer) {\n              this.dropdown = this._createEl(\"div\", {\n                \"class\": \"iti iti--container\"\n              });\n              this.dropdown.appendChild(this.countryList);\n            } else {\n              this.flagsContainer.appendChild(this.countryList);\n            }\n          }\n          if (this.options.hiddenInput) {\n            var hiddenInputName = this.options.hiddenInput;\n            var name = this.telInput.getAttribute(\"name\");\n            if (name) {\n              var i = name.lastIndexOf(\"[\");\n              // if input name contains square brackets, then give the hidden input the same name,\n              // replacing the contents of the last set of brackets with the given hiddenInput name\n              if (i !== -1) hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n            }\n            this.hiddenInput = this._createEl(\"input\", {\n              type: \"hidden\",\n              name: hiddenInputName\n            });\n            wrapper.appendChild(this.hiddenInput);\n          }\n        }\n      }, {\n        key: \"_appendListItems\",\n        value: function _appendListItems(countries, className, preferred) {\n          // we create so many DOM elements, it is faster to build a temp string\n          // and then add everything to the DOM in one go at the end\n          var tmp = \"\";\n          // for each country\n          for (var i = 0; i < countries.length; i++) {\n            var c = countries[i];\n            var idSuffix = preferred ? \"-preferred\" : \"\";\n            // open the list item\n            tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-\").concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"' aria-selected='false'>\");\n            // add the flag\n            tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n            // and the country name and dial code\n            tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n            tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n            // close the list item\n            tmp += \"</li>\";\n          }\n          this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n        }\n      }, {\n        key: \"_setInitialState\",\n        value: function _setInitialState() {\n          // fix firefox bug: when first load page (with input with value set to number with intl dial\n          // code) and initialising plugin removes the dial code from the input, then refresh page,\n          // and we try to init plugin again but this time on number without dial code so get grey flag\n          var attributeValue = this.telInput.getAttribute(\"value\");\n          var inputValue = this.telInput.value;\n          var useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n          var val = useAttribute ? attributeValue : inputValue;\n          var dialCode = this._getDialCode(val);\n          var isRegionlessNanp = this._isRegionlessNanp(val);\n          var _this$options = this.options,\n            initialCountry = _this$options.initialCountry,\n            nationalMode = _this$options.nationalMode,\n            autoHideDialCode = _this$options.autoHideDialCode,\n            separateDialCode = _this$options.separateDialCode;\n          // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n          // flag, else fall back to the default country\n          if (dialCode && !isRegionlessNanp) {\n            this._updateFlagFromNumber(val);\n          } else if (initialCountry !== \"auto\") {\n            // see if we should select a flag\n            if (initialCountry) {\n              this._setFlag(initialCountry.toLowerCase());\n            } else {\n              if (dialCode && isRegionlessNanp) {\n                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                this._setFlag(\"us\");\n              } else {\n                // no dial code and no initialCountry, so default to first in list\n                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                if (!val) {\n                  this._setFlag(this.defaultCountry);\n                }\n              }\n            }\n            // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\n            if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {\n              this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n            }\n          }\n          // NOTE: if initialCountry is set to auto, that will be handled separately\n          // format - note this wont be run after _updateDialCode as that's only called if no val\n          if (val) this._updateValFromNumber(val);\n        }\n      }, {\n        key: \"_initListeners\",\n        value: function _initListeners() {\n          this._initKeyListeners();\n          if (this.options.autoHideDialCode) this._initBlurListeners();\n          if (this.options.allowDropdown) this._initDropdownListeners();\n          if (this.hiddenInput) this._initHiddenInputListener();\n        }\n      }, {\n        key: \"_initHiddenInputListener\",\n        value: function _initHiddenInputListener() {\n          var _this3 = this;\n          this._handleHiddenInputSubmit = function () {\n            _this3.hiddenInput.value = _this3.getNumber();\n          };\n          if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n        }\n      }, {\n        key: \"_getClosestLabel\",\n        value: function _getClosestLabel() {\n          var el = this.telInput;\n          while (el && el.tagName !== \"LABEL\") {\n            el = el.parentNode;\n          }\n          return el;\n        }\n      }, {\n        key: \"_initDropdownListeners\",\n        value: function _initDropdownListeners() {\n          var _this4 = this;\n          // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n          // open the dropdown would then automatically trigger a 2nd click on the input which would\n          // close it again\n          this._handleLabelClick = function (e) {\n            // if the dropdown is closed, then focus the input, else ignore the click\n            if (_this4.countryList.classList.contains(\"iti__hide\")) _this4.telInput.focus();else e.preventDefault();\n          };\n          var label = this._getClosestLabel();\n          if (label) label.addEventListener(\"click\", this._handleLabelClick);\n          // toggle country dropdown on click\n          this._handleClickSelectedFlag = function () {\n            // only intercept this event if we're opening the dropdown\n            // else let it bubble up to the top (\"click-off-to-close\" listener)\n            // we cannot just stopPropagation as it may be needed to close another instance\n            if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n              _this4._showDropdown();\n            }\n          };\n          this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n          // open dropdown list if currently focused\n          this._handleFlagsContainerKeydown = function (e) {\n            var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n            if (isDropdownHidden && [\"ArrowUp\", \"Up\", \"ArrowDown\", \"Down\", \" \", \"Enter\"].indexOf(e.key) !== -1) {\n              // prevent form from being submitted if \"ENTER\" was pressed\n              e.preventDefault();\n              // prevent event from being handled again by document\n              e.stopPropagation();\n              _this4._showDropdown();\n            }\n            // allow navigation from dropdown to input on TAB\n            if (e.key === \"Tab\") _this4._closeDropdown();\n          };\n          this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n        }\n      }, {\n        key: \"_initRequests\",\n        value: function _initRequests() {\n          var _this5 = this;\n          // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n          if (this.options.utilsScript && !window.intlTelInputUtils) {\n            // if the plugin is being initialised after the window.load event has already been fired\n            if (window.intlTelInputGlobals.documentReady()) {\n              window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n            } else {\n              // wait until the load event so we don't block any other requests e.g. the flags image\n              window.addEventListener(\"load\", function () {\n                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n              });\n            }\n          } else this.resolveUtilsScriptPromise();\n          if (this.options.initialCountry === \"auto\") this._loadAutoCountry();else this.resolveAutoCountryPromise();\n        }\n      }, {\n        key: \"_loadAutoCountry\",\n        value: function _loadAutoCountry() {\n          // 3 options:\n          // 1) already loaded (we're done)\n          // 2) not already started loading (start)\n          // 3) already started loading (do nothing - just wait for loading callback to fire)\n          if (window.intlTelInputGlobals.autoCountry) {\n            this.handleAutoCountry();\n          } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n            // don't do this twice!\n            window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n            if (typeof this.options.geoIpLookup === \"function\") {\n              this.options.geoIpLookup(function (countryCode) {\n                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                // tell all instances the auto country is ready\n                // TODO: this should just be the current instances\n                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                // setTimeout means that the current thread of execution will finish before executing\n                // this, which allows the plugin to finish initialising.\n                setTimeout(function () {\n                  return forEachInstance(\"handleAutoCountry\");\n                });\n              }, function () {\n                return forEachInstance(\"rejectAutoCountryPromise\");\n              });\n            }\n          }\n        }\n      }, {\n        key: \"_initKeyListeners\",\n        value: function _initKeyListeners() {\n          var _this6 = this;\n          // update flag on keyup\n          this._handleKeyupEvent = function () {\n            if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n              _this6._triggerCountryChange();\n            }\n          };\n          this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n          // update flag on cut/paste events (now supported in all major browsers)\n          this._handleClipboardEvent = function () {\n            // hack because \"paste\" event is fired before input is updated\n            setTimeout(_this6._handleKeyupEvent);\n          };\n          this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n          this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n        }\n      }, {\n        key: \"_cap\",\n        value: function _cap(number) {\n          var max = this.telInput.getAttribute(\"maxlength\");\n          return max && number.length > max ? number.substr(0, max) : number;\n        }\n      }, {\n        key: \"_initBlurListeners\",\n        value: function _initBlurListeners() {\n          var _this7 = this;\n          // on blur or form submit: if just a dial code then remove it\n          this._handleSubmitOrBlurEvent = function () {\n            _this7._removeEmptyDialCode();\n          };\n          if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n          this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n        }\n      }, {\n        key: \"_removeEmptyDialCode\",\n        value: function _removeEmptyDialCode() {\n          if (this.telInput.value.charAt(0) === \"+\") {\n            var numeric = this._getNumeric(this.telInput.value);\n            // if just a plus, or if just a dial code\n            if (!numeric || this.selectedCountryData.dialCode === numeric) {\n              this.telInput.value = \"\";\n            }\n          }\n        }\n      }, {\n        key: \"_getNumeric\",\n        value: function _getNumeric(s) {\n          return s.replace(/\\D/g, \"\");\n        }\n      }, {\n        key: \"_trigger\",\n        value: function _trigger(name) {\n          // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n          var e = document.createEvent(\"Event\");\n          e.initEvent(name, true, true);\n          // can bubble, and is cancellable\n          this.telInput.dispatchEvent(e);\n        }\n      }, {\n        key: \"_showDropdown\",\n        value: function _showDropdown() {\n          this.countryList.classList.remove(\"iti__hide\");\n          this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n          this._setDropdownPosition();\n          // update highlighting and scroll to active list item\n          if (this.activeItem) {\n            this._highlightListItem(this.activeItem, false);\n            this._scrollTo(this.activeItem, true);\n          }\n          // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n          this._bindDropdownListeners();\n          // update the arrow\n          this.dropdownArrow.classList.add(\"iti__arrow--up\");\n          this._trigger(\"open:countrydropdown\");\n        }\n      }, {\n        key: \"_toggleClass\",\n        value: function _toggleClass(el, className, shouldHaveClass) {\n          if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className);else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);\n        }\n      }, {\n        key: \"_setDropdownPosition\",\n        value: function _setDropdownPosition() {\n          var _this8 = this;\n          if (this.options.dropdownContainer) {\n            this.options.dropdownContainer.appendChild(this.dropdown);\n          }\n          if (!this.isMobile) {\n            var pos = this.telInput.getBoundingClientRect();\n            // windowTop from https://stackoverflow.com/a/14384091/217866\n            var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n            var inputTop = pos.top + windowTop;\n            var dropdownHeight = this.countryList.offsetHeight;\n            // dropdownFitsBelow = (dropdownBottom < windowBottom)\n            var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n            var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n            // by default, the dropdown will be below the input. If we want to position it above the\n            // input, we add the dropup class.\n            this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n            // if dropdownContainer is enabled, calculate postion\n            if (this.options.dropdownContainer) {\n              // by default the dropdown will be directly over the input because it's not in the flow.\n              // If we want to position it below, we need to add some extra top value.\n              var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n              // calculate placement\n              this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n              this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n              // close menu on window scroll\n              this._handleWindowScroll = function () {\n                return _this8._closeDropdown();\n              };\n              window.addEventListener(\"scroll\", this._handleWindowScroll);\n            }\n          }\n        }\n      }, {\n        key: \"_getClosestListItem\",\n        value: function _getClosestListItem(target) {\n          var el = target;\n          while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n            el = el.parentNode;\n          }\n          // if we reached the countryList element, then return null\n          return el === this.countryList ? null : el;\n        }\n      }, {\n        key: \"_bindDropdownListeners\",\n        value: function _bindDropdownListeners() {\n          var _this9 = this;\n          // when mouse over a list item, just highlight that one\n          // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n          this._handleMouseoverCountryList = function (e) {\n            // handle event delegation, as we're listening for this event on the countryList\n            var listItem = _this9._getClosestListItem(e.target);\n            if (listItem) _this9._highlightListItem(listItem, false);\n          };\n          this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n          // listen for country selection\n          this._handleClickCountryList = function (e) {\n            var listItem = _this9._getClosestListItem(e.target);\n            if (listItem) _this9._selectListItem(listItem);\n          };\n          this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n          // click off to close\n          // (except when this initial opening click is bubbling up)\n          // we cannot just stopPropagation as it may be needed to close another instance\n          var isOpening = true;\n          this._handleClickOffToClose = function () {\n            if (!isOpening) _this9._closeDropdown();\n            isOpening = false;\n          };\n          document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n          // listen for up/down scrolling, enter to select, or letters to jump to country name.\n          // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n          // just hit down and hold it to scroll down (no keyup event).\n          // listen on the document because that's where key events are triggered if no input has focus\n          var query = \"\";\n          var queryTimer = null;\n          this._handleKeydownOnDropdown = function (e) {\n            // prevent down key from scrolling the whole page,\n            // and enter key from submitting a form etc\n            e.preventDefault();\n            // up and down to navigate\n            if (e.key === \"ArrowUp\" || e.key === \"Up\" || e.key === \"ArrowDown\" || e.key === \"Down\") _this9._handleUpDownKey(e.key);else if (e.key === \"Enter\") _this9._handleEnterKey();else if (e.key === \"Escape\") _this9._closeDropdown();else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n              // jump to countries that start with the query string\n              if (queryTimer) clearTimeout(queryTimer);\n              query += e.key.toLowerCase();\n              _this9._searchForCountry(query);\n              // if the timer hits 1 second, reset the query\n              queryTimer = setTimeout(function () {\n                query = \"\";\n              }, 1e3);\n            }\n          };\n          document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n        }\n      }, {\n        key: \"_handleUpDownKey\",\n        value: function _handleUpDownKey(key) {\n          var next = key === \"ArrowUp\" || key === \"Up\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n          if (next) {\n            // skip the divider\n            if (next.classList.contains(\"iti__divider\")) {\n              next = key === \"ArrowUp\" || key === \"Up\" ? next.previousElementSibling : next.nextElementSibling;\n            }\n            this._highlightListItem(next, true);\n          }\n        }\n      }, {\n        key: \"_handleEnterKey\",\n        value: function _handleEnterKey() {\n          if (this.highlightedItem) this._selectListItem(this.highlightedItem);\n        }\n      }, {\n        key: \"_searchForCountry\",\n        value: function _searchForCountry(query) {\n          for (var i = 0; i < this.countries.length; i++) {\n            if (this._startsWith(this.countries[i].name, query)) {\n              var listItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(this.countries[i].iso2));\n              // update highlighting and scroll\n              this._highlightListItem(listItem, false);\n              this._scrollTo(listItem, true);\n              break;\n            }\n          }\n        }\n      }, {\n        key: \"_startsWith\",\n        value: function _startsWith(a, b) {\n          return a.substr(0, b.length).toLowerCase() === b;\n        }\n      }, {\n        key: \"_updateValFromNumber\",\n        value: function _updateValFromNumber(originalNumber) {\n          var number = originalNumber;\n          if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n            var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== \"+\");\n            var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat,\n              NATIONAL = _intlTelInputUtils$nu.NATIONAL,\n              INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n            var format = useNational ? NATIONAL : INTERNATIONAL;\n            number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n          }\n          number = this._beforeSetNumber(number);\n          this.telInput.value = number;\n        }\n      }, {\n        key: \"_updateFlagFromNumber\",\n        value: function _updateFlagFromNumber(originalNumber) {\n          // if we're in nationalMode and we already have US/Canada selected, make sure the number starts\n          // with a +1 so _getDialCode will be able to extract the area code\n          // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n          // from the number), that means we're initialising the plugin with a number that already has a\n          // dial code, so fine to ignore this bit\n          var number = originalNumber;\n          var selectedDialCode = this.selectedCountryData.dialCode;\n          var isNanp = selectedDialCode === \"1\";\n          if (number && this.options.nationalMode && isNanp && number.charAt(0) !== \"+\") {\n            if (number.charAt(0) !== \"1\") number = \"1\".concat(number);\n            number = \"+\".concat(number);\n          }\n          // update flag if user types area code for another country\n          if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n            number = \"+\".concat(selectedDialCode).concat(number);\n          }\n          // try and extract valid dial code from input\n          var dialCode = this._getDialCode(number, true);\n          var numeric = this._getNumeric(number);\n          var countryCode = null;\n          if (dialCode) {\n            var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n            // check if the right country is already selected. this should be false if the number is\n            // longer than the matched dial code because in this case we need to make sure that if\n            // there are multiple country matches, that the first one is selected (note: we could\n            // just check that here, but it requires the same loop that we already have later)\n            var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n            var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n            // only update the flag if:\n            // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n            // AND\n            // B) the right country is not already selected\n            if (!isRegionlessNanpNumber && !alreadySelected) {\n              // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n              // non-empty index\n              for (var j = 0; j < countryCodes.length; j++) {\n                if (countryCodes[j]) {\n                  countryCode = countryCodes[j];\n                  break;\n                }\n              }\n            }\n          } else if (number.charAt(0) === \"+\" && numeric.length) {\n            // invalid dial code, so empty\n            // Note: use getNumeric here because the number has not been formatted yet, so could contain\n            // bad chars\n            countryCode = \"\";\n          } else if (!number || number === \"+\") {\n            // empty, or just a plus, so default\n            countryCode = this.defaultCountry;\n          }\n          if (countryCode !== null) {\n            return this._setFlag(countryCode);\n          }\n          return false;\n        }\n      }, {\n        key: \"_isRegionlessNanp\",\n        value: function _isRegionlessNanp(number) {\n          var numeric = this._getNumeric(number);\n          if (numeric.charAt(0) === \"1\") {\n            var areaCode = numeric.substr(1, 3);\n            return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n          }\n          return false;\n        }\n      }, {\n        key: \"_highlightListItem\",\n        value: function _highlightListItem(listItem, shouldFocus) {\n          var prevItem = this.highlightedItem;\n          if (prevItem) prevItem.classList.remove(\"iti__highlight\");\n          this.highlightedItem = listItem;\n          this.highlightedItem.classList.add(\"iti__highlight\");\n          if (shouldFocus) this.highlightedItem.focus();\n        }\n      }, {\n        key: \"_getCountryData\",\n        value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n          var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n          for (var i = 0; i < countryList.length; i++) {\n            if (countryList[i].iso2 === countryCode) {\n              return countryList[i];\n            }\n          }\n          if (allowFail) {\n            return null;\n          }\n          throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n        }\n      }, {\n        key: \"_setFlag\",\n        value: function _setFlag(countryCode) {\n          var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n          // do this first as it will throw an error and stop if countryCode is invalid\n          this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n          // update the defaultCountry - we only need the iso2 from now on, so just store that\n          if (this.selectedCountryData.iso2) {\n            this.defaultCountry = this.selectedCountryData.iso2;\n          }\n          this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n          // update the selected country's title attribute\n          var title = countryCode ? \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode) : \"Unknown\";\n          this.selectedFlag.setAttribute(\"title\", title);\n          if (this.options.separateDialCode) {\n            var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n            this.selectedDialCode.innerHTML = dialCode;\n            // offsetWidth is zero if input is in a hidden container during initialisation\n            var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n            // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n            this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n          }\n          // and the input's placeholder\n          this._updatePlaceholder();\n          // update the active list item\n          if (this.options.allowDropdown) {\n            var prevItem = this.activeItem;\n            if (prevItem) {\n              prevItem.classList.remove(\"iti__active\");\n              prevItem.setAttribute(\"aria-selected\", \"false\");\n            }\n            if (countryCode) {\n              // check if there is a preferred item first, else fall back to standard\n              var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n              nextItem.setAttribute(\"aria-selected\", \"true\");\n              nextItem.classList.add(\"iti__active\");\n              this.activeItem = nextItem;\n              this.selectedFlag.setAttribute(\"aria-activedescendant\", nextItem.getAttribute(\"id\"));\n            }\n          }\n          // return if the flag has changed or not\n          return prevCountry.iso2 !== countryCode;\n        }\n      }, {\n        key: \"_getHiddenSelectedFlagWidth\",\n        value: function _getHiddenSelectedFlagWidth() {\n          // to get the right styling to apply, all we need is a shallow clone of the container,\n          // and then to inject a deep clone of the selectedFlag element\n          var containerClone = this.telInput.parentNode.cloneNode();\n          containerClone.style.visibility = \"hidden\";\n          document.body.appendChild(containerClone);\n          var flagsContainerClone = this.flagsContainer.cloneNode();\n          containerClone.appendChild(flagsContainerClone);\n          var selectedFlagClone = this.selectedFlag.cloneNode(true);\n          flagsContainerClone.appendChild(selectedFlagClone);\n          var width = selectedFlagClone.offsetWidth;\n          containerClone.parentNode.removeChild(containerClone);\n          return width;\n        }\n      }, {\n        key: \"_updatePlaceholder\",\n        value: function _updatePlaceholder() {\n          var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n          if (window.intlTelInputUtils && shouldSetPlaceholder) {\n            var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n            var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n            placeholder = this._beforeSetNumber(placeholder);\n            if (typeof this.options.customPlaceholder === \"function\") {\n              placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n            }\n            this.telInput.setAttribute(\"placeholder\", placeholder);\n          }\n        }\n      }, {\n        key: \"_selectListItem\",\n        value: function _selectListItem(listItem) {\n          // update selected flag and active list item\n          var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n          this._closeDropdown();\n          this._updateDialCode(listItem.getAttribute(\"data-dial-code\"), true);\n          // focus the input\n          this.telInput.focus();\n          // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto\n          // inserting dial code), who try to put the cursor at the beginning the first time\n          var len = this.telInput.value.length;\n          this.telInput.setSelectionRange(len, len);\n          if (flagChanged) {\n            this._triggerCountryChange();\n          }\n        }\n      }, {\n        key: \"_closeDropdown\",\n        value: function _closeDropdown() {\n          this.countryList.classList.add(\"iti__hide\");\n          this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n          // update the arrow\n          this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n          // unbind key events\n          document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n          document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n          this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n          this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n          // remove menu from container\n          if (this.options.dropdownContainer) {\n            if (!this.isMobile) window.removeEventListener(\"scroll\", this._handleWindowScroll);\n            if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);\n          }\n          this._trigger(\"close:countrydropdown\");\n        }\n      }, {\n        key: \"_scrollTo\",\n        value: function _scrollTo(element, middle) {\n          var container = this.countryList;\n          // windowTop from https://stackoverflow.com/a/14384091/217866\n          var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n          var containerHeight = container.offsetHeight;\n          var containerTop = container.getBoundingClientRect().top + windowTop;\n          var containerBottom = containerTop + containerHeight;\n          var elementHeight = element.offsetHeight;\n          var elementTop = element.getBoundingClientRect().top + windowTop;\n          var elementBottom = elementTop + elementHeight;\n          var newScrollTop = elementTop - containerTop + container.scrollTop;\n          var middleOffset = containerHeight / 2 - elementHeight / 2;\n          if (elementTop < containerTop) {\n            // scroll up\n            if (middle) newScrollTop -= middleOffset;\n            container.scrollTop = newScrollTop;\n          } else if (elementBottom > containerBottom) {\n            // scroll down\n            if (middle) newScrollTop += middleOffset;\n            var heightDifference = containerHeight - elementHeight;\n            container.scrollTop = newScrollTop - heightDifference;\n          }\n        }\n      }, {\n        key: \"_updateDialCode\",\n        value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {\n          var inputVal = this.telInput.value;\n          // save having to pass this every time\n          var newDialCode = \"+\".concat(newDialCodeBare);\n          var newNumber;\n          if (inputVal.charAt(0) === \"+\") {\n            // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\n            var prevDialCode = this._getDialCode(inputVal);\n            if (prevDialCode) {\n              // current number contains a valid dial code, so replace it\n              newNumber = inputVal.replace(prevDialCode, newDialCode);\n            } else {\n              // current number contains an invalid dial code, so ditch it\n              // (no way to determine where the invalid dial code ends and the rest of the number begins)\n              newNumber = newDialCode;\n            }\n          } else if (this.options.nationalMode || this.options.separateDialCode) {\n            // don't do anything\n            return;\n          } else {\n            // nationalMode is disabled\n            if (inputVal) {\n              // there is an existing value with no dial code: prefix the new dial code\n              newNumber = newDialCode + inputVal;\n            } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\n              // no existing value and either they've just selected a list item, or autoHideDialCode is\n              // disabled: insert new dial code\n              newNumber = newDialCode;\n            } else {\n              return;\n            }\n          }\n          this.telInput.value = newNumber;\n        }\n      }, {\n        key: \"_getDialCode\",\n        value: function _getDialCode(number, includeAreaCode) {\n          var dialCode = \"\";\n          // only interested in international numbers (starting with a plus)\n          if (number.charAt(0) === \"+\") {\n            var numericChars = \"\";\n            // iterate over chars\n            for (var i = 0; i < number.length; i++) {\n              var c = number.charAt(i);\n              // if char is number (https://stackoverflow.com/a/8935649/217866)\n              if (!isNaN(parseInt(c, 10))) {\n                numericChars += c;\n                // if current numericChars make a valid dial code\n                if (includeAreaCode) {\n                  if (this.countryCodes[numericChars]) {\n                    // store the actual raw string (useful for matching later)\n                    dialCode = number.substr(0, i + 1);\n                  }\n                } else {\n                  if (this.dialCodes[numericChars]) {\n                    dialCode = number.substr(0, i + 1);\n                    // if we're just looking for a dial code, we can break as soon as we find one\n                    break;\n                  }\n                }\n                // stop searching as soon as we can - in this case when we hit max len\n                if (numericChars.length === this.countryCodeMaxLen) {\n                  break;\n                }\n              }\n            }\n          }\n          return dialCode;\n        }\n      }, {\n        key: \"_getFullNumber\",\n        value: function _getFullNumber() {\n          var val = this.telInput.value.trim();\n          var dialCode = this.selectedCountryData.dialCode;\n          var prefix;\n          var numericVal = this._getNumeric(val);\n          if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n            // when using separateDialCode, it is visible so is effectively part of the typed number\n            prefix = \"+\".concat(dialCode);\n          } else {\n            prefix = \"\";\n          }\n          return prefix + val;\n        }\n      }, {\n        key: \"_beforeSetNumber\",\n        value: function _beforeSetNumber(originalNumber) {\n          var number = originalNumber;\n          if (this.options.separateDialCode) {\n            var dialCode = this._getDialCode(number);\n            // if there is a valid dial code\n            if (dialCode) {\n              // in case _getDialCode returned an area code as well\n              dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n              // a lot of numbers will have a space separating the dial code and the main number, and\n              // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n              // rid of it\n              // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n              var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n              number = number.substr(start);\n            }\n          }\n          return this._cap(number);\n        }\n      }, {\n        key: \"_triggerCountryChange\",\n        value: function _triggerCountryChange() {\n          this._trigger(\"countrychange\");\n        }\n      }, {\n        key: \"handleAutoCountry\",\n        value: function handleAutoCountry() {\n          if (this.options.initialCountry === \"auto\") {\n            // we must set this even if there is an initial val in the input: in case the initial val is\n            // invalid and they delete it - they should see their auto country\n            this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n            // if there's no initial value in the input, then update the flag\n            if (!this.telInput.value) {\n              this.setCountry(this.defaultCountry);\n            }\n            this.resolveAutoCountryPromise();\n          }\n        }\n      }, {\n        key: \"handleUtils\",\n        value: function handleUtils() {\n          // if the request was successful\n          if (window.intlTelInputUtils) {\n            // if there's an initial value in the input, then format it\n            if (this.telInput.value) {\n              this._updateValFromNumber(this.telInput.value);\n            }\n            this._updatePlaceholder();\n          }\n          this.resolveUtilsScriptPromise();\n        }\n      }, {\n        key: \"destroy\",\n        value: function destroy() {\n          var form = this.telInput.form;\n          if (this.options.allowDropdown) {\n            // make sure the dropdown is closed (and unbind listeners)\n            this._closeDropdown();\n            this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n            this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n            // label click hack\n            var label = this._getClosestLabel();\n            if (label) label.removeEventListener(\"click\", this._handleLabelClick);\n          }\n          // unbind hiddenInput listeners\n          if (this.hiddenInput && form) form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n          // unbind autoHideDialCode listeners\n          if (this.options.autoHideDialCode) {\n            if (form) form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n            this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n          }\n          // unbind key events, and cut/paste events\n          this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n          this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n          this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n          // remove attribute of id instance: data-intl-tel-input-id\n          this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n          // remove markup (but leave the original input)\n          var wrapper = this.telInput.parentNode;\n          wrapper.parentNode.insertBefore(this.telInput, wrapper);\n          wrapper.parentNode.removeChild(wrapper);\n          delete window.intlTelInputGlobals.instances[this.id];\n        }\n      }, {\n        key: \"getExtension\",\n        value: function getExtension() {\n          if (window.intlTelInputUtils) {\n            return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n          }\n          return \"\";\n        }\n      }, {\n        key: \"getNumber\",\n        value: function getNumber(format) {\n          if (window.intlTelInputUtils) {\n            var iso2 = this.selectedCountryData.iso2;\n            return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n          }\n          return \"\";\n        }\n      }, {\n        key: \"getNumberType\",\n        value: function getNumberType() {\n          if (window.intlTelInputUtils) {\n            return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n          }\n          return -99;\n        }\n      }, {\n        key: \"getSelectedCountryData\",\n        value: function getSelectedCountryData() {\n          return this.selectedCountryData;\n        }\n      }, {\n        key: \"getValidationError\",\n        value: function getValidationError() {\n          if (window.intlTelInputUtils) {\n            var iso2 = this.selectedCountryData.iso2;\n            return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n          }\n          return -99;\n        }\n      }, {\n        key: \"isValidNumber\",\n        value: function isValidNumber() {\n          var val = this._getFullNumber().trim();\n          var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\n          return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\n        }\n      }, {\n        key: \"setCountry\",\n        value: function setCountry(originalCountryCode) {\n          var countryCode = originalCountryCode.toLowerCase();\n          // check if already selected\n          if (!this.selectedFlagInner.classList.contains(\"iti__\".concat(countryCode))) {\n            this._setFlag(countryCode);\n            this._updateDialCode(this.selectedCountryData.dialCode, false);\n            this._triggerCountryChange();\n          }\n        }\n      }, {\n        key: \"setNumber\",\n        value: function setNumber(number) {\n          // we must update the flag first, which updates this.selectedCountryData, which is used for\n          // formatting the number before displaying it\n          var flagChanged = this._updateFlagFromNumber(number);\n          this._updateValFromNumber(number);\n          if (flagChanged) {\n            this._triggerCountryChange();\n          }\n        }\n      }, {\n        key: \"setPlaceholderNumberType\",\n        value: function setPlaceholderNumberType(type) {\n          this.options.placeholderNumberType = type;\n          this._updatePlaceholder();\n        }\n      }]);\n      return Iti;\n    }();\n    /********************\n    *  STATIC METHODS\n    ********************/\n    // get the country data object\n    intlTelInputGlobals.getCountryData = function () {\n      return allCountries;\n    };\n    // inject a <script> element to load utils.js\n    var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n      // inject a new script element into the page\n      var script = document.createElement(\"script\");\n      script.onload = function () {\n        forEachInstance(\"handleUtils\");\n        if (handleSuccess) handleSuccess();\n      };\n      script.onerror = function () {\n        forEachInstance(\"rejectUtilsScriptPromise\");\n        if (handleFailure) handleFailure();\n      };\n      script.className = \"iti-load-utils\";\n      script.async = true;\n      script.src = path;\n      document.body.appendChild(script);\n    };\n    // load the utils script\n    intlTelInputGlobals.loadUtils = function (path) {\n      // 2 options:\n      // 1) not already started loading (start)\n      // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n      // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n      if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n        // only do this once\n        window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n        // if we have promises, then return a promise\n        if (typeof Promise !== \"undefined\") {\n          return new Promise(function (resolve, reject) {\n            return injectScript(path, resolve, reject);\n          });\n        }\n        injectScript(path);\n      }\n      return null;\n    };\n    // default options\n    intlTelInputGlobals.defaults = defaults;\n    // version\n    intlTelInputGlobals.version = \"17.0.19\";\n    // convenience wrapper\n    return function (input, options) {\n      var iti = new Iti(input, options);\n      iti._init();\n      input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n      window.intlTelInputGlobals.instances[iti.id] = iti;\n      return iti;\n    };\n  }();\n});","map":{"version":3,"names":["factory","module","exports","window","intlTelInput","undefined","allCountries","i","length","c","name","iso2","dialCode","priority","areaCodes","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","intlTelInputGlobals","getInstance","input","id","getAttribute","instances","documentReady","document","readyState","defaults","allowDropdown","autoHideDialCode","autoPlaceholder","customContainer","customPlaceholder","dropdownContainer","excludeCountries","formatOnDisplay","geoIpLookup","hiddenInput","initialCountry","localizedCountries","nationalMode","onlyCountries","placeholderNumberType","preferredCountries","separateDialCode","utilsScript","regionlessNanpNumbers","forEachProp","obj","callback","keys","forEachInstance","method","Iti","options","_this","telInput","activeItem","highlightedItem","customOptions","value","hasOwnProperty","hadInitialPlaceholder","Boolean","_init","_this2","isMobile","test","navigator","userAgent","body","classList","add","Promise","autoCountryPromise","resolve","reject","resolveAutoCountryPromise","rejectAutoCountryPromise","utilsScriptPromise","resolveUtilsScriptPromise","rejectUtilsScriptPromise","promise","all","selectedCountryData","_processCountryData","_generateMarkup","_setInitialState","_initListeners","_initRequests","_processAllCountries","_processCountryCodes","_processPreferredCountries","_translateCountriesByLocale","countries","sort","_countryNameSort","_addCountryCode","countryCode","countryCodeMaxLen","countryCodes","index","lowerCaseOnlyCountries","map","country","toLowerCase","filter","indexOf","lowerCaseExcludeCountries","iso","a","b","localeCompare","dialCodes","_i","_c","rootCountryCode","j","areaCode","k","partialDialCode","substr","countryData","_getCountryData","push","_createEl","attrs","container","el","createElement","setAttribute","appendChild","hasAttribute","form","parentClass","wrapper","parentNode","insertBefore","flagsContainer","selectedFlag","role","concat","selectedFlagInner","selectedDialCode","dropdownArrow","countryList","_appendListItems","dropdown","hiddenInputName","lastIndexOf","type","className","preferred","tmp","idSuffix","insertAdjacentHTML","attributeValue","inputValue","useAttribute","charAt","val","_getDialCode","isRegionlessNanp","_isRegionlessNanp","_this$options","_updateFlagFromNumber","_setFlag","defaultCountry","_updateValFromNumber","_initKeyListeners","_initBlurListeners","_initDropdownListeners","_initHiddenInputListener","_this3","_handleHiddenInputSubmit","getNumber","addEventListener","_getClosestLabel","tagName","_this4","_handleLabelClick","e","contains","focus","preventDefault","label","_handleClickSelectedFlag","disabled","readOnly","_showDropdown","_handleFlagsContainerKeydown","isDropdownHidden","stopPropagation","_closeDropdown","_this5","intlTelInputUtils","loadUtils","_loadAutoCountry","autoCountry","handleAutoCountry","startedLoadingAutoCountry","setTimeout","_this6","_handleKeyupEvent","_triggerCountryChange","_handleClipboardEvent","_cap","number","max","_this7","_handleSubmitOrBlurEvent","_removeEmptyDialCode","numeric","_getNumeric","s","replace","_trigger","createEvent","initEvent","dispatchEvent","remove","_setDropdownPosition","_highlightListItem","_scrollTo","_bindDropdownListeners","_toggleClass","shouldHaveClass","_this8","pos","getBoundingClientRect","windowTop","pageYOffset","documentElement","scrollTop","inputTop","top","dropdownHeight","offsetHeight","dropdownFitsBelow","innerHeight","dropdownFitsAbove","extraTop","style","left","scrollLeft","_handleWindowScroll","_getClosestListItem","_this9","_handleMouseoverCountryList","listItem","_handleClickCountryList","_selectListItem","isOpening","_handleClickOffToClose","query","queryTimer","_handleKeydownOnDropdown","_handleUpDownKey","_handleEnterKey","clearTimeout","_searchForCountry","next","previousElementSibling","nextElementSibling","_startsWith","querySelector","originalNumber","useNational","_intlTelInputUtils$nu","numberFormat","NATIONAL","INTERNATIONAL","format","formatNumber","_beforeSetNumber","isNanp","alreadySelected","isRegionlessNanpNumber","shouldFocus","prevItem","ignoreOnlyCountriesOption","allowFail","Error","prevCountry","title","innerHTML","selectedFlagWidth","offsetWidth","_getHiddenSelectedFlagWidth","paddingLeft","_updatePlaceholder","nextItem","containerClone","cloneNode","visibility","flagsContainerClone","selectedFlagClone","width","removeChild","shouldSetPlaceholder","numberType","placeholder","getExampleNumber","flagChanged","_updateDialCode","len","setSelectionRange","removeEventListener","element","middle","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","middleOffset","heightDifference","newDialCodeBare","hasSelectedListItem","inputVal","newDialCode","newNumber","prevDialCode","includeAreaCode","numericChars","isNaN","parseInt","_getFullNumber","trim","prefix","numericVal","start","setCountry","handleUtils","destroy","removeAttribute","getExtension","getNumberType","getSelectedCountryData","getValidationError","isValidNumber","originalCountryCode","setNumber","setPlaceholderNumberType","getCountryData","injectScript","path","handleSuccess","handleFailure","script","onload","onerror","async","src","startedLoadingUtilsScript","version","iti"],"sources":["D:/Personal/rimba-frontend/node_modules/intl-tel-input/build/js/intlTelInput.js"],"sourcesContent":["/*\n * International Telephone Input v17.0.19\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    if (typeof module === \"object\" && module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua and Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Ascension Island\", \"ac\", \"247\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Eswatini\", \"sz\", \"268\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"North Macedonia (Македонија)\", \"mk\", \"389\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"Saint Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        \"use strict\";\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n        }\n        var intlTelInputGlobals = {\n            getInstance: function getInstance(input) {\n                var id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {},\n            // using a global like this allows us to mock it in the tests\n            documentReady: function documentReady() {\n                return document.readyState === \"complete\";\n            }\n        };\n        if (typeof window === \"object\") window.intlTelInputGlobals = intlTelInputGlobals;\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // if there is just a dial code in the input: remove it on blur\n            autoHideDialCode: true,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // modify the parentClass\n            customContainer: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // don't insert international dial codes\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag so it's not part of the typed number\n            separateDialCode: false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/\n        function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if in nationalMode, disable options relating to dial codes\n                    if (this.options.nationalMode) this.options.autoHideDialCode = false;\n                    // if separateDialCode then doesn't make sense to A) insert dial code into input\n                    // (autoHideDialCode), and B) display national numbers (because we're displaying the country\n                    // dial code next to them)\n                    if (this.options.separateDialCode) {\n                        this.options.autoHideDialCode = this.options.nationalMode = false;\n                    }\n                    // we cannot just test screen size as some smartphones/website meta tags will report desktop\n                    // resolutions\n                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n                    // rest of these declarations\n                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n                    if (this.isMobile) {\n                        // trigger the mobile dropdown css\n                        document.body.classList.add(\"iti-mobile\");\n                        // on mobile, we want a full screen dropdown, so we must append it to the body\n                        if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;\n                    }\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) this._translateCountriesByLocale();\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, countryCode, priority) {\n                    if (countryCode.length > this.countryCodeMaxLen) {\n                        this.countryCodeMaxLen = countryCode.length;\n                    }\n                    if (!this.countryCodes.hasOwnProperty(countryCode)) {\n                        this.countryCodes[countryCode] = [];\n                    }\n                    // bail if we already have this country for this countryCode\n                    for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n                        if (this.countryCodes[countryCode][i] === iso2) return;\n                    }\n                    // check for undefined as 0 is falsy\n                    var index = priority !== undefined ? priority : this.countryCodes[countryCode].length;\n                    this.countryCodes[countryCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    return a.name.localeCompare(b.name);\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.countryCodeMaxLen = 0;\n                    // here we store just dial codes\n                    this.dialCodes = {};\n                    // here we store \"country codes\" (both dial codes and their area codes)\n                    this.countryCodes = {};\n                    // first: add dial codes\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        if (!this.dialCodes[c.dialCode]) this.dialCodes[c.dialCode] = true;\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                    }\n                    // next: add area codes\n                    // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                    // already in the map, so that we can access them, as each time we add an area code substring\n                    // to the map, we also need to include the \"root\" country's code, as that also matches\n                    for (var _i = 0; _i < this.countries.length; _i++) {\n                        var _c = this.countries[_i];\n                        // area codes\n                        if (_c.areaCodes) {\n                            var rootCountryCode = this.countryCodes[_c.dialCode][0];\n                            // for each area code\n                            for (var j = 0; j < _c.areaCodes.length; j++) {\n                                var areaCode = _c.areaCodes[j];\n                                // for each digit in the area code to add all partial matches as well\n                                for (var k = 1; k < areaCode.length; k++) {\n                                    var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                                    // start with the root country, as that also matches this dial code\n                                    this._addCountryCode(rootCountryCode, partialDialCode);\n                                    this._addCountryCode(_c.iso2, partialDialCode);\n                                }\n                                // add the full area code\n                                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) this.preferredCountries.push(countryData);\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) forEachProp(attrs, function(key, value) {\n                        return el.setAttribute(key, value);\n                    });\n                    if (container) container.appendChild(el);\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    // if autocomplete does not exist on the element and its form, then\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)\n                    if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                        this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    }\n                    // containers (mostly for positioning)\n                    var parentClass = \"iti\";\n                    if (this.options.allowDropdown) parentClass += \" iti--allow-dropdown\";\n                    if (this.options.separateDialCode) parentClass += \" iti--separate-dial-code\";\n                    if (this.options.customContainer) {\n                        parentClass += \" \";\n                        parentClass += this.options.customContainer;\n                    }\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    this.flagsContainer = this._createEl(\"div\", {\n                        \"class\": \"iti__flag-container\"\n                    }, wrapper);\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    this.selectedFlag = this._createEl(\"div\", {\n                        \"class\": \"iti__selected-flag\",\n                        role: \"combobox\",\n                        \"aria-controls\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-owns\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-expanded\": \"false\"\n                    }, this.flagsContainer);\n                    this.selectedFlagInner = this._createEl(\"div\", {\n                        \"class\": \"iti__flag\"\n                    }, this.selectedFlag);\n                    if (this.options.separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"iti__selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.options.allowDropdown) {\n                        // make element focusable and tab navigable\n                        this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti__arrow\"\n                        }, this.selectedFlag);\n                        // country dropdown: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"iti__country-list iti__hide\",\n                            id: \"iti-\".concat(this.id, \"__country-listbox\"),\n                            role: \"listbox\",\n                            \"aria-label\": \"List of countries\"\n                        });\n                        if (this.preferredCountries.length) {\n                            this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                            this._createEl(\"li\", {\n                                \"class\": \"iti__divider\",\n                                role: \"separator\",\n                                \"aria-disabled\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"iti__standard\");\n                        // create dropdownContainer markup\n                        if (this.options.dropdownContainer) {\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": \"iti iti--container\"\n                            });\n                            this.dropdown.appendChild(this.countryList);\n                        } else {\n                            this.flagsContainer.appendChild(this.countryList);\n                        }\n                    }\n                    if (this.options.hiddenInput) {\n                        var hiddenInputName = this.options.hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className, preferred) {\n                    // we create so many DOM elements, it is faster to build a temp string\n                    // and then add everything to the DOM in one go at the end\n                    var tmp = \"\";\n                    // for each country\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        var idSuffix = preferred ? \"-preferred\" : \"\";\n                        // open the list item\n                        tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-\").concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"' aria-selected='false'>\");\n                        // add the flag\n                        tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n                        // and the country name and dial code\n                        tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n                        tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        // close the list item\n                        tmp += \"</li>\";\n                    }\n                    this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    // fix firefox bug: when first load page (with input with value set to number with intl dial\n                    // code) and initialising plugin removes the dial code from the input, then refresh page,\n                    // and we try to init plugin again but this time on number without dial code so get grey flag\n                    var attributeValue = this.telInput.getAttribute(\"value\");\n                    var inputValue = this.telInput.value;\n                    var useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n                    var val = useAttribute ? attributeValue : inputValue;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        // see if we should select a flag\n                        if (initialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\n                        if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) this._updateValFromNumber(val);\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoHideDialCode) this._initBlurListeners();\n                    if (this.options.allowDropdown) this._initDropdownListeners();\n                    if (this.hiddenInput) this._initHiddenInputListener();\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.countryList.classList.contains(\"iti__hide\")) _this4.telInput.focus(); else e.preventDefault();\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) label.addEventListener(\"click\", this._handleLabelClick);\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown list if currently focused\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"Up\", \"ArrowDown\", \"Down\", \" \", \"Enter\" ].indexOf(e.key) !== -1) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") _this4._closeDropdown();\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.documentReady()) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else this.resolveUtilsScriptPromise();\n                    if (this.options.initialCountry === \"auto\") this._loadAutoCountry(); else this.resolveAutoCountryPromise();\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initBlurListeners\",\n                value: function _initBlurListeners() {\n                    var _this7 = this;\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    if (this.telInput.value.charAt(0) === \"+\") {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    this.countryList.classList.remove(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    // update highlighting and scroll to active list item\n                    if (this.activeItem) {\n                        this._highlightListItem(this.activeItem, false);\n                        this._scrollTo(this.activeItem, true);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className); else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.isMobile) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.countryList.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._highlightListItem(listItem, false);\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._selectListItem(listItem);\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) _this9._closeDropdown();\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or letters to jump to country name.\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        e.preventDefault();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"Up\" || e.key === \"ArrowDown\" || e.key === \"Down\") _this9._handleUpDownKey(e.key); else if (e.key === \"Enter\") _this9._handleEnterKey(); else if (e.key === \"Escape\") _this9._closeDropdown(); else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n                            // jump to countries that start with the query string\n                            if (queryTimer) clearTimeout(queryTimer);\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" || key === \"Up\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"iti__divider\")) {\n                            next = key === \"ArrowUp\" || key === \"Up\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                        this._highlightListItem(next, true);\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) this._selectListItem(this.highlightedItem);\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(this.countries[i].iso2));\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem, false);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== \"+\");\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(originalNumber) {\n                    // if we're in nationalMode and we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var number = originalNumber;\n                    var selectedDialCode = this.selectedCountryData.dialCode;\n                    var isNanp = selectedDialCode === \"1\";\n                    if (number && this.options.nationalMode && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") number = \"1\".concat(number);\n                        number = \"+\".concat(number);\n                    }\n                    // update flag if user types area code for another country\n                    if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                        number = \"+\".concat(selectedDialCode).concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number, true);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        // check if the right country is already selected. this should be false if the number is\n                        // longer than the matched dial code because in this case we need to make sure that if\n                        // there are multiple country matches, that the first one is selected (note: we could\n                        // just check that here, but it requires the same loop that we already have later)\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                        var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) the right country is not already selected\n                        if (!isRegionlessNanpNumber && !alreadySelected) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem, shouldFocus) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) prevItem.classList.remove(\"iti__highlight\");\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"iti__highlight\");\n                    if (shouldFocus) this.highlightedItem.focus();\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n                    // update the selected country's title attribute\n                    var title = countryCode ? \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode) : \"Unknown\";\n                    this.selectedFlag.setAttribute(\"title\", title);\n                    if (this.options.separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        this.selectedDialCode.innerHTML = dialCode;\n                        // offsetWidth is zero if input is in a hidden container during initialisation\n                        var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                        this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (this.options.allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"iti__active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            // check if there is a preferred item first, else fall back to standard\n                            var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"iti__active\");\n                            this.activeItem = nextItem;\n                            this.selectedFlag.setAttribute(\"aria-activedescendant\", nextItem.getAttribute(\"id\"));\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_getHiddenSelectedFlagWidth\",\n                value: function _getHiddenSelectedFlagWidth() {\n                    // to get the right styling to apply, all we need is a shallow clone of the container,\n                    // and then to inject a deep clone of the selectedFlag element\n                    var containerClone = this.telInput.parentNode.cloneNode();\n                    containerClone.style.visibility = \"hidden\";\n                    document.body.appendChild(containerClone);\n                    var flagsContainerClone = this.flagsContainer.cloneNode();\n                    containerClone.appendChild(flagsContainerClone);\n                    var selectedFlagClone = this.selectedFlag.cloneNode(true);\n                    flagsContainerClone.appendChild(selectedFlagClone);\n                    var width = selectedFlagClone.offsetWidth;\n                    containerClone.parentNode.removeChild(containerClone);\n                    return width;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"), true);\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto\n                    // inserting dial code), who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.countryList.classList.add(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.isMobile) window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.countryList;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) newScrollTop -= middleOffset;\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) newScrollTop += middleOffset;\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                    } else if (this.options.nationalMode || this.options.separateDialCode) {\n                        // don't do anything\n                        return;\n                    } else {\n                        // nationalMode is disabled\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\n                            // no existing value and either they've just selected a list item, or autoHideDialCode is\n                            // disabled: insert new dial code\n                            newNumber = newDialCode;\n                        } else {\n                            return;\n                        }\n                    }\n                    this.telInput.value = newNumber;\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number, includeAreaCode) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (includeAreaCode) {\n                                    if (this.countryCodes[numericChars]) {\n                                        // store the actual raw string (useful for matching later)\n                                        dialCode = number.substr(0, i + 1);\n                                    }\n                                } else {\n                                    if (this.dialCodes[numericChars]) {\n                                        dialCode = number.substr(0, i + 1);\n                                        // if we're just looking for a dial code, we can break as soon as we find one\n                                        break;\n                                    }\n                                }\n                                // stop searching as soon as we can - in this case when we hit max len\n                                if (numericChars.length === this.countryCodeMaxLen) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        // if there is a valid dial code\n                        if (dialCode) {\n                            // in case _getDialCode returned an area code as well\n                            dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) label.removeEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    // unbind autoHideDialCode listeners\n                    if (this.options.autoHideDialCode) {\n                        if (form) form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind key events, and cut/paste events\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove attribute of id instance: data-intl-tel-input-id\n                    this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (!this.selectedFlagInner.classList.contains(\"iti__\".concat(countryCode))) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode, false);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) handleSuccess();\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) handleFailure();\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"17.0.19\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}